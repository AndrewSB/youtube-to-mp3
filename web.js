// Generated by CoffeeScript 1.8.0
(function() {
  var app, convert_and_send, express, ffmpeg, fs, http, path, qs, server, ytdl;

  express = require('express');

  ffmpeg = require('fluent-ffmpeg');

  http = require('http');

  ytdl = require('ytdl');

  path = require('path');

  fs = require('fs');

  qs = require('querystring');

  app = express();

  server = http.createServer(app);

  app.set(function() {
    app.set('port', process.env.PORT || 3000);
    app.set('views', "" + __dirname + "/views");
    return app.set('view engine', 'jade');
  });

  server.listen(app.get('port'), function() {
    return console.log("Express server listening on port " + (app.get('port')));
  });

  app.get('/', function(req, res) {
    return res.render('index');
  });

  app.get('/play', function(req, res) {
    return ytdl.getInfo(req.query.url, function(err, info) {
      var success, thumb, title;
      if (err != null) {
        success = false;
      } else {
        console.log(info);
        success = true;
        title = info.title;
        thumb = info.thumbnail_url;
      }
      return res.render('play', {
        yt_url: req.query.url,
        title: title,
        thumb: thumb,
        success: success
      });
    });
  });

  app.get('/convert', function(req, res) {
    var dest;
    console.log("processing " + req.query.url);
    res.contentType('mp3');
    dest = path.join(__dirname, 'tmp', req.query.url);
    return ytdl.getInfo(req.query.url, function(err, info) {
      var file, pathToMovie;
      if (err != null) {
        console.log(err.message);
        return;
      }
      pathToMovie = path.join(__dirname, 'tmp', info.video_id);
      if (fs.existsSync("" + pathToMovie + ".mp3")) {
        console.log("already downloaded");
        return res.sendfile("" + pathToMovie + ".mp3");
      } else if (fs.existsSync(pathToMovie)) {
        return convert_and_send(pathToMovie, res);
      } else {
        console.log("downloading and converting");
        file = fs.createWriteStream(pathToMovie);
        ytdl(req.query.url).pipe(file);
        return file.on('close', function() {
          return convert_and_send(pathToMovie, res);
        });
      }
    });
  });

  convert_and_send = function(pathToMovie, res) {
    console.log("converting");
    return new ffmpeg({
      source: pathToMovie,
      nolog: true
    }).withAudioCodec('libmp3lame').toFormat('mp3').saveToFile("" + pathToMovie + ".mp3", function(retcode, error) {
      if (typeof err === "undefined" || err === null) {
        return res.sendfile("" + pathToMovie + ".mp3");
      }
    });
  };

}).call(this);
